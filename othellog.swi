/* ------------------------------------------------ */
/* factors */
changeTurn(o, x). 
changeTurn(x, o).
exit(bye, _).
exit(_, bye).
vecList([has(-1,-1),has(-1,0),has(-1,1),has(0,-1),has(0,1), has(1,-1),has(1,0),has(1,1)]).
adder(X, Y, AX, AY, NX, NY) :- NX is X+AX, NY is Y+AY.
addget(Field, X, Y, VX, VY, X1, Y1, S) :- 
    adder(X, Y, VX, VY, X1, Y1), getState(Field, X1, Y1, S). 

/* ------------------------------------------------ */
/* initialize */
init(Field) :-
    initPanel(0, 0, Field1),
    putState(Field1, 3, 3, o, Field2),
    putState(Field2, 3, 4, x, Field3),
    putState(Field3, 4, 3, x, Field4),
    putState(Field4, 4, 4, o, Field).
initPanel(7, 7, [panel(7, 7, ' ')]):- !.
initPanel(7, Y, [panel(7, Y, ' ')|Field]) :- !,
    adder(0, Y, 0, 1, 0, Y1),
    initPanel(0, Y1, Field).
initPanel(X, Y, [panel(X, Y, ' ')|Field]) :-
    adder(X, 0, 1, 0, X1, 0),
    initPanel(X1, Y, Field).

/* ------------------------------------------------ */
/* getter and setter */
getState([panel(X, Y, FS)|_], X, Y, FS) :- !.
getState([], _, _, n):- !.
getState([_|T], X, Y, FS) :- getState(T, X, Y, FS).
putState([], _, _, _, []) :- !.
putState([panel(X, Y, _)|T], X, Y, S, [panel(X, Y, S)|T]) :- !.
putState([H|T], X, Y, S, [H|R]) :- putState(T, X, Y, S, R).

/* set State if the position is settable */
put(CurrentField, panel(X, Y, S), NextField) :-
    getState(CurrentField, X, Y, ' '),
    putState(CurrentField, X, Y, S, Next1),
    vecList(VecList), reverse(Next1, X, Y, S, VecList, NextField).

/* ------------------------------------------------ */
/* reverse States as if putting this position */
reverse(Field, X, Y, S, [], Field) :- !.
reverse(Field, X, Y, S, [has(VX, VY)|VecList], NextField) :-
    checkReverseLine(Field, X, Y, S, VX, VY, Next),
    reverse(Next, X, Y, S, VecList, NextField).
checkReverseLine(Field, X, Y, S, VX, VY, NextField) :-
    addget(Field, X, Y, VX, VY, X1, Y1, S1),
    (
        S=S1, !,
        VX1 is VX * -1,
        VY1 is VY * -1,
        reverseLine(Field, X1, Y1, S, VX1, VY1, NextField);
        changeTurn(S, S2), S1=S2, !,
        checkReverseLine(Field, X1, Y1, S, VX, VY, NextField)
    ).
checkReverseLine(Field, _, _, _, _, _, Field).
reverseLine(Field, X, Y, S, VX, VY, Field) :-
    adder(X, Y, VX, VY, X1, Y1),
    addget(Field, X, Y, VX, VY, X1, Y1, S1), S=S1, !.
reverseLine(Field, X, Y, S, VX, VY, NextField) :-
    addget(Field, X, Y, VX, VY, X1, Y1, S2),
    changeTurn(S, S1), S1=S2, !,
    putState(Field, X1, Y1, S, Next1),
    reverseLine(Next1, X1, Y1, S, VX, VY, NextField).

/* ------------------------------------------------ */
/* show field */
show(Field) :-
    write(' --------'), nl, write('|'),
    showPanel(0, 0, Field),
    write(' --------'), nl.
showPanel(X, Y, Field) :-
    getState(Field, X, Y, FS),
    write(FS),
    showNext(X, Y, Field).
showNext(7, 7, Field) :- !, write('|'), nl.
showNext(7, Y, Field) :- !, 
    write('|'), nl, write('|'),
    adder(0, Y, 0, 1, 0, Y1),
    showPanel(0, Y1, Field).
showNext(X, Y, Field) :-
    adder(X, 0, 1, 0, X1, 0),
    showPanel(X1, Y, Field).

/* ------------------------------------------------ */
/* main */
start :- init(F), main(F, o).
startDebug :- see('debug.txt'), start.
main(Field, Turn) :- 
    show(Field),
    finish(Field);
    pass(Field, Turn), !,
    changeTurn(Turn, NextTurn),
    (
        pass(Field, NextTurn), !, finishize(Field, Full), finish(Full);
        write(Turn), write(' cannot put.'), nl,  main(Field, NextTurn)
    );
    write('Put '), write(Turn), nl,
    write('Position X? >'), read(X), nl,
    write('Position Y? >'), read(Y), nl,
    (
        exit(X, Y), !;
        (
            continue(Field, X, Y, Turn, NextField, NextTurn), !;
            put(Field, panel(X, Y, Turn), NextField),
            changeTurn(Turn, NextTurn)
        ),
        main(NextField, NextTurn)
    ).
continue(Field, X, Y, Turn, Field, Turn) :-
    getState(Field, X, Y, S),
    not((S=' ', reversable(Field, X, Y, Turn))).
reversable(Field, X, Y, S) :-
    member(VX, [-1, 0, 1]),
    member(VY, [-1, 0, 1]),
    not((VX=0, VY=0)),
    reversableLine(Field, X, Y, S, VX, VY, f).
reversableLine(Field, X, Y, S, VX, VY, Flg) :-
    addget(Field, X, Y, VX, VY, X1, Y1, S1),
    (
        S=S1, Flg=t;
        changeTurn(S, S1),
        reversableLine(Field, X1, Y1, S, VX, VY, t)
    ).
pass(Field, Turn) :- not(passPanel(Field, Field, Turn)).
passPanel(Field, [panel(X, Y, ' ')|T], Turn) :- reversable(Field, X, Y, Turn), !.
passPanel(Field, [H|T], Turn) :- passPanel(Field, T, Turn).
finish(Field) :- finishCount(Field, 0, 0).
finishCount([], O, X) :- !,
    O > X, write('winner is o'), nl;
    X > O, write('winner is x'), nl;
    O =:= X, write('draw game'), nl.
finishCount([panel(_, _, o)|T], O, X) :- O1 is O+1, finishCount(T, O1, X).
finishCount([panel(_, _, x)|T], O, X) :- adder(X, 0, 1, 0, X1, 0), finishCount(T, O, X1).
finishCount([panel(_, _, n)|T], O, X) :- finishCount(T, O, X).
finishize([], []) :- !.
finishize([panel(X, Y, ' ')|T], [panel(X, Y, n)|R]) :- !, finishize(T, R).
finishize([panel(X, Y, S)|T], [panel(X, Y, S)|R]) :- finishize(T, R).
